Basic Overview:
cd - change location
pwd - print working director
ls - check files
mkdir - make directory
rmdir - remove directory
rm - remove
clear - clear screen
man - manual
nano - file editor
vim - file editor
touch - create a file
cat - print out a file
emacs
ls -al - list all directorys in list format
head -# (file.txt) - list the first 3 elements in the file
tail -# (file.txt) - list the last 3 elements in the file
less (file.txt) - like nano but read 
wc -l (file.txt) - how to check how many lines are in the file
wc -w (file.txt) check how many words are in the file
wc -c (file.txt) check how many characters are in the file
grep (global regular expression print) - match and find any text in the input and print it
grep ex: cat file.txt | grep berry(Search word)
sort - sorts the file in alphabetical order
uniq - strip duplicate adjacent lines 
uniq ex: cat file.txt | uniq berry
pipe - move data into a different file or output
pipe ex: cat fruits.txt | sort $xarg | uniq | wc -l $xarg
$xarg - temporary file name
find - search file system
find ex: find *.java (file or extention) (you can also do text as well)
ls /etc/ | less - search a directory but get less output
cut - remove a section from each line of file
> - output information elsewhere
> ex: cat file.txt | grep berry > newfile.txt
>> - append to the existing file
>> ex: cat file.txt | grep berry >> newfile.txt
2> - records logs or errors to a file 
2> ex: cat fruit.txt 2> caterror.txt
2>&1 - print error on screen and input it into a file
2>&1 ex: cat frut.txt 2>&1 caterror.txt
| - pipe output into a file or new command
| ex: cat fruits.txt | sort 
&& - run multiple commands
&& ex: grep "avo" berries.txt && wc -l $xarg (count amount of berrys with avo then print the output)
; - after doing one command do another and dont move data from first to second command
; ex: cat fruits.txt ; sort fruits.txt
; ex: cat fruits.txt ; sort (this command will expect input which can be stopped with ctrl + d to stop input and recive output)
. -> current directory
.. -> parent directory
~ -> home directory
? - display all of the elements after the previous character beginning with ?
? ex: ls file?.txt
[] - display a range of items
[] ex: grep "(200[[:digit:]])" movies.txt


Function commands:
pwd -> check working directory
ls -> list contents of inside of a directory
cd -> change directory
mkdir -> create a directory
rmdir - remove a directory
touch -> create an empty file
rm -> remove (directory or file)
mv -> move a file to another place
cp -> copy another file 
scp -> copy to/from remote server
wget -> download from online
clear -> clear the terminal
find -> search for files or strings within a directory
awk -> analyze patterns in files
xargs -> reads files from standard input
grep -> global regular expression print used for printing out text in a file
tee -> reads from standard input
sed -> stream editor


Print commands:
cat -> Display content of a file
head -> Display beginning 
tail -> Display sending of a file
less -> Display file with interactive screen
more -> Display file with interactive screen
diff -> Check difference between two files
wc -> ount words/lines/characters in a file
uniq -> strip out duplicate lines
sort -> sort file ascending/descending order input lines
find -> List all the files that march keywords
grep -> list all the lines of file containing keyword


grep flags:
-w Select only those lines containing matches that form whole words.
-i Ignore case distinctions in patterns and input data, so that characters that differ only in case m>
-F Interpret PATTERNS as fixed strings, not regular expressions.
-f FILE Obtain patterns from FILE, one per line
-n Prefix each line of output with the 1-based line number within its input file.
-m NUM Stop reading a file after NUM matching lines.
-c Suppress normal output; instead print a count of matching lines for each input file.
-x Select only those matches that exactly match the whole line.
-v Invert the sense of matching, to select non-matching lines.
-H Print the file name for each match. This is the default when there is more than one file to search.
-l Suppress normal output; instead print the name of each input file from which output would normally>
-o Print only the matched (non-empty) parts of a matching line
-E Interpret PATTERNS as extended regular expressions (EREs, see below).
-P Interpret I<PATTERNS> as Perl-compatible regular expressions (PCREs) (a|b|c|d|e|f|g)


Redirecting streams:
< redirect input for the command
> redirect output for the command
>> redirect output without removing old content of output
| redirect outcomes of command to another command

Regular Expression:
Syntax:      Funcitonality:
.            Any character
^            Start of line
$            End of the line
\<           Start of word
\>           End of word
\            Escape after characters
i            Flag to grep inside
|            Logical or
*            Zero or more
+            One or more
?            Zero or one
()           Group together
[]           Character set 
[^]          Neg character set
[a-z]        All lowercase
[A-Z]        All uppercase
[0-9]        All digits
\|           Back reference -> earlier
{n}          Matches exactly n occurences
{n,}         Matches preceding Element
{n,m}        Matches n to an element


Control Operators:
; -> concatenate commands
&& -> run second if first succeeds
|| -> run second if first error


for loops:
for i in {1..3}; do mkdir dir$i && touch dir${i}/file.txt; done
for i in {1..3}; do echo "Content for file ${i}" > file$i.txt; done
for i in {1..5}; do touch file${i}.txt; done
for i in $(seq 1 100) "file${i}.txt; 
for i in $(seq 1 100); do mv "file${i}.txt" "file${i}.dat"
